import React, { useState, useEffect } from 'react';
import { fetchRoomTypes, createRoomType, updateRoomType, deleteRoomType } from '../../services/RoomTypes'; // –ù—É–∂–µ–Ω –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
import LoadingSpinner from '../../components/LoadingSpinner';

const RoomTypesPage = () => {
    const [roomTypes, setRoomTypes] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [newRoomType, setNewRoomType] = useState({ name: '', areaCoefficient: '', peopleCoefficient: '' });
    const [editingRoomType, setEditingRoomType] = useState(null); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è

    useEffect(() => {
        loadRoomTypes();
    }, []);

    const loadRoomTypes = async () => {
        try {
            setLoading(true);
            const data = await fetchRoomTypes();
            setRoomTypes(data);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π');
            console.error('Error loading room types:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleCreate = async (e) => {
        e.preventDefault();
        try {
            const createdType = await createRoomType(newRoomType);
            setRoomTypes([...roomTypes, createdType]);
            setNewRoomType({ name: '', areaCoefficient: '', peopleCoefficient: '' });
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è');
            console.error('Error creating room type:', err);
        }
    };

    const handleUpdate = async (e) => {
        e.preventDefault();
        if (!editingRoomType) return;
        try {
            await updateRoomType(editingRoomType.id, editingRoomType);
            setRoomTypes(roomTypes.map(type => type.id === editingRoomType.id ? editingRoomType : type));
            setEditingRoomType(null);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è');
            console.error('Error updating room type:', err);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è?')) {
            try {
                await deleteRoomType(id);
                setRoomTypes(roomTypes.filter(type => type.id !== id));
            } catch (err) {
                setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è');
                console.error('Error deleting room type:', err);
            }
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        if (editingRoomType) {
            setEditingRoomType(prev => ({ ...prev, [name]: value }));
        } else {
            setNewRoomType(prev => ({ ...prev, [name]: value }));
        }
    };

    if (loading) {
        return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π..." />;
    }

    if (error) {
        return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;
    }

    return (
        <div className="admin-page-container minimal-admin-flex">
            <div className="admin-form-card">
                <div className="admin-card-title">–¢–∏–ø—ã –ø–æ–º–µ—â–µ–Ω–∏–π</div>
                <form onSubmit={editingRoomType ? handleUpdate : handleCreate}>
                    <div className="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input
                            type="text"
                            name="name"
                            value={editingRoomType ? editingRoomType.name : newRoomType.name}
                            onChange={handleInputChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>–ö–æ—ç—Ñ. –ø–ª–æ—â–∞–¥–∏:</label>
                        <input
                            type="number"
                            name="areaCoefficient"
                            value={editingRoomType ? editingRoomType.areaCoefficient : newRoomType.areaCoefficient}
                            onChange={handleInputChange}
                            step="0.01"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>–ö–æ—ç—Ñ. —á–µ–ª–æ–≤–µ–∫:</label>
                        <input
                            type="number"
                            name="peopleCoefficient"
                            value={editingRoomType ? editingRoomType.peopleCoefficient : newRoomType.peopleCoefficient}
                            onChange={handleInputChange}
                            step="0.01"
                            required
                        />
                    </div>
                    <div className="form-buttons">
                        <button type="submit" className="form-button green-button">{editingRoomType ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                        {editingRoomType && (
                            <button type="button" className="form-button cancel-button" onClick={() => setEditingRoomType(null)}>–û—Ç–º–µ–Ω–∞</button>
                        )}
                    </div>
                </form>
            </div>
            <div className="admin-list-card">
                <div className="admin-card-title">–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π</div>
                <ul>
                    {roomTypes.map(type => (
                        <li key={type.id} className="list-item">
                            <span>{type.name} (–ü–ª–æ—â–∞–¥—å: {type.areaCoefficient}, –ß–µ–ª–æ–≤–µ–∫: {type.peopleCoefficient})</span>
                            <div className="item-buttons">
                                <button onClick={() => setEditingRoomType(type)} className="form-button blue-button">‚úé</button>
                                <button onClick={() => handleDelete(type.id)} className="form-button cancel-button">üóë</button>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default RoomTypesPage; 