import React, { useState, useEffect } from 'react';
import { fetchPossibleCharacteristics, createPossibleCharacteristic, updatePossibleCharacteristic, deletePossibleCharacteristic } from '../../services/PossibleCharacteristics';
import { fetchDeviceTypes } from '../../services/DeviceTypes'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞
import LoadingSpinner from '../../components/LoadingSpinner';

const PossibleCharacteristicsPage = () => {
    const [possibleCharacteristics, setPossibleCharacteristics] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [deviceTypes, setDeviceTypes] = useState([]);
    const [filterDeviceTypeId, setFilterDeviceTypeId] = useState('');
    const [newCharacteristic, setNewCharacteristic] = useState({ name: '', unit: '', deviceTypeId: '', type: 'string', isRequired: false });
    const [editingCharacteristic, setEditingCharacteristic] = useState(null);

    useEffect(() => {
        loadPossibleCharacteristics(filterDeviceTypeId);
        loadDeviceTypes();
    }, [filterDeviceTypeId]);

    const loadPossibleCharacteristics = async (deviceTypeId) => {
        try {
            setLoading(true);
            const data = await fetchPossibleCharacteristics(deviceTypeId);
            setPossibleCharacteristics(data);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
            console.error('Error loading possible characteristics:', err);
        } finally {
            setLoading(false);
        }
    };

    const loadDeviceTypes = async () => {
        try {
            const data = await fetchDeviceTypes();
            setDeviceTypes(data);
        } catch (err) {
            console.error('Error loading device types for filter:', err);
        }
    };

    const handleCreate = async (e) => {
        e.preventDefault();
        try {
            const characteristicToCreate = {
                ...newCharacteristic,
                deviceTypeId: parseInt(newCharacteristic.deviceTypeId, 10)
            };
            const createdCharacteristic = await createPossibleCharacteristic(characteristicToCreate);
            setPossibleCharacteristics([...possibleCharacteristics, createdCharacteristic]);
            setNewCharacteristic({ name: '', unit: '', deviceTypeId: '', type: 'string', isRequired: false });
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
            console.error('Error creating possible characteristic:', err);
        }
    };

    const handleUpdate = async (e) => {
        e.preventDefault();
        if (!editingCharacteristic) return;
        try {
            const characteristicToUpdate = {
                ...editingCharacteristic,
                deviceTypeId: parseInt(editingCharacteristic.deviceTypeId, 10)
            };
            await updatePossibleCharacteristic(editingCharacteristic.id, characteristicToUpdate);
            setPossibleCharacteristics(possibleCharacteristics.map(char => char.id === editingCharacteristic.id ? characteristicToUpdate : char));
            setEditingCharacteristic(null);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
            console.error('Error updating possible characteristic:', err);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É?')) {
            try {
                await deletePossibleCharacteristic(id);
                setPossibleCharacteristics(possibleCharacteristics.filter(char => char.id !== id));
            } catch (err) {
                setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
                console.error('Error deleting possible characteristic:', err);
            }
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        if (editingCharacteristic) {
            setEditingCharacteristic(prev => ({ ...prev, [name]: value }));
        } else {
            setNewCharacteristic(prev => ({ ...prev, [name]: value }));
        }
    };

    if (loading) {
        return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫..." />;
    }

    if (error) {
        return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;
    }

    return (
        <div className="admin-page-container minimal-admin-flex">
            <div className="admin-form-card">
                <div className="admin-card-title">–í–æ–∑–º–æ–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</div>
                <div className="filter-block">
                    <div className="filter-title">–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</div>
                    <div className="filter-container form-group">
                        <label>–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</label>
                        <select value={filterDeviceTypeId} onChange={(e) => setFilterDeviceTypeId(e.target.value)}>
                            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                            {deviceTypes.map(type => (
                                <option key={type.id} value={type.id}>{type.name}</option>
                            ))}
                        </select>
                    </div>
                </div>
                <form onSubmit={editingCharacteristic ? handleUpdate : handleCreate}>
                    <div className="form-group">
                        <label>–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</label>
                        <select
                            name="deviceTypeId"
                            value={editingCharacteristic ? editingCharacteristic.deviceTypeId : newCharacteristic.deviceTypeId}
                            onChange={handleInputChange}
                            required
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                            {deviceTypes.map(type => (
                                <option key={type.id} value={type.id}>{type.name}</option>
                            ))}
                        </select>
                    </div>
                    <div className="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input
                            type="text"
                            name="name"
                            value={editingCharacteristic ? editingCharacteristic.name : newCharacteristic.name}
                            onChange={handleInputChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>–ï–¥. –∏–∑–º.:</label>
                        <input
                            type="text"
                            name="unit"
                            value={editingCharacteristic ? editingCharacteristic.unit : newCharacteristic.unit}
                            onChange={handleInputChange}
                        />
                    </div>
                    <div className="form-group">
                        <label>–¢–∏–ø:</label>
                        <select
                            name="type"
                            value={editingCharacteristic ? editingCharacteristic.type : newCharacteristic.type || 'string'}
                            onChange={handleInputChange}
                            required
                        >
                            <option value="string">–°—Ç—Ä–æ–∫–∞</option>
                            <option value="number">–ß–∏—Å–ª–æ</option>
                            <option value="bool">–î–∞/–ù–µ—Ç</option>
                        </select>
                    </div>
                    <div className="form-buttons">
                        <button type="submit" className="form-button green-button">{editingCharacteristic ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                        {editingCharacteristic && (
                            <button type="button" className="form-button cancel-button" onClick={() => setEditingCharacteristic(null)}>–û—Ç–º–µ–Ω–∞</button>
                        )}
                    </div>
                </form>
            </div>
            <div className="admin-list-card">
                <ul>
                    {possibleCharacteristics.map(char => (
                        <li key={char.id} className="list-item">
                            <span>{char.name} ({char.deviceType?.name}){char.unit ? ` (${char.unit})` : ''}</span>
                            <div className="item-buttons">
                                <button onClick={() => setEditingCharacteristic(char)} className="form-button blue-button">‚úé</button>
                                <button onClick={() => handleDelete(char.id)} className="form-button cancel-button">üóë</button>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default PossibleCharacteristicsPage; 