import React, { useState, useEffect } from 'react';
import { fetchDeviceTypesAdmin, createDeviceType, updateDeviceType, deleteDeviceType } from '../../services/DeviceTypesAdmin';
import LoadingSpinner from '../../components/LoadingSpinner';

const DeviceTypesPage = () => {
    const [deviceTypes, setDeviceTypes] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [newDeviceType, setNewDeviceType] = useState({ name: '', description: '' });
    const [editingDeviceType, setEditingDeviceType] = useState(null);

    useEffect(() => {
        loadDeviceTypes();
    }, []);

    const loadDeviceTypes = async () => {
        try {
            setLoading(true);
            const data = await fetchDeviceTypesAdmin();
            setDeviceTypes(data);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
            console.error('Error loading device types:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleCreate = async (e) => {
        e.preventDefault();
        try {
            const createdType = await createDeviceType(newDeviceType);
            setDeviceTypes([...deviceTypes, createdType]);
            setNewDeviceType({ name: '', description: '' });
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
            console.error('Error creating device type:', err);
        }
    };

    const handleUpdate = async (e) => {
        e.preventDefault();
        if (!editingDeviceType) return;
        try {
            await updateDeviceType(editingDeviceType.id, editingDeviceType);
            setDeviceTypes(deviceTypes.map(type => type.id === editingDeviceType.id ? editingDeviceType : type));
            setEditingDeviceType(null);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
            console.error('Error updating device type:', err);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?')) {
            try {
                await deleteDeviceType(id);
                setDeviceTypes(deviceTypes.filter(type => type.id !== id));
            } catch (err) {
                setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
                console.error('Error deleting device type:', err);
            }
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        if (editingDeviceType) {
            setEditingDeviceType(prev => ({ ...prev, [name]: value }));
        } else {
            setNewDeviceType(prev => ({ ...prev, [name]: value }));
        }
    };

    if (loading) {
        return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤..." />;
    }

    if (error) {
        return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;
    }

    return (
        <div className="admin-page-container minimal-admin-flex">
            <div className="admin-form-card">
                <div className="admin-card-title">–¢–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
                <form onSubmit={editingDeviceType ? handleUpdate : handleCreate}>
                    <div className="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input
                            type="text"
                            name="name"
                            value={editingDeviceType ? editingDeviceType.name : newDeviceType.name}
                            onChange={handleInputChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <textarea
                            name="description"
                            value={editingDeviceType ? editingDeviceType.description : newDeviceType.description}
                            onChange={handleInputChange}
                        />
                    </div>
                    <div className="form-buttons">
                        <button type="submit" className="form-button green-button">{editingDeviceType ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                        {editingDeviceType && (
                            <button type="button" className="form-button cancel-button" onClick={() => setEditingDeviceType(null)}>–û—Ç–º–µ–Ω–∞</button>
                        )}
                    </div>
                </form>
            </div>
            <div className="admin-list-card">
                <div className="admin-card-title">–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
                <ul>
                    {deviceTypes.map(type => (
                        <li key={type.id} className="list-item">
                            <span>{type.name}</span>
                            <div className="item-buttons">
                                <button onClick={() => setEditingDeviceType(type)} className="form-button blue-button">‚úé</button>
                                <button onClick={() => handleDelete(type.id)} className="form-button cancel-button">üóë</button>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default DeviceTypesPage; 